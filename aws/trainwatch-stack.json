{
  "AWSTemplateFormatVersion":"2010-09-09",
  "Description":"AWS CloudFormation Sample .",
  "Parameters":{
    "KeyName":{
      "Description":"Name of an existing EC2 KeyPair to enable SSH access to the bastion host",
      "Type":"AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription":"must be the name of an existing EC2 KeyPair.",
      "Default":"aws-temp-scg"
    },
    "SSHLocation":{
      "Description":"Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
      "Type":"String",
      "MinLength":"9",
      "MaxLength":"18",
      "Default":"0.0.0.0/0",
      "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription":"must be a valid CIDR range of the form x.x.x.x/x."
    },
    "EC2InstanceType":{
      "Description":"EC2 instance type",
      "Type":"String",
      "Default":"t2.micro",
      "AllowedValues":[
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m1.small",
        "m1.medium",
        "m1.large"
      ],
      "ConstraintDescription":"must be a valid EC2 instance type."
    }
  },
  "Mappings":{
    "SubnetConfig":{
      "VPC":{
        "CIDR":"10.0.0.0/16"
      },
      "Public":{
        "CIDR":"10.0.0.0/24"
      }
    },
    "AWSRegion2AMI":{
      "eu-west-1":{
        "AMI":"ami-f9dd458a"
      },
      "eu-central-1":{
        "AMI":"ami-ea26ce85"
      }
    }
  },
  "Resources":{
    "VPC":{
      "Type":"AWS::EC2::VPC",
      "Properties":{
        "EnableDnsSupport":"true",
        "EnableDnsHostnames":"true",
        "CidrBlock":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "VPC",
            "CIDR"
          ]
        },
        "Tags":[
          {
            "Key":"Application",
            "Value":{
              "Ref":"AWS::StackName"
            }
          },
          {
            "Key":"Network",
            "Value":"Public"
          }
        ]
      }
    },
    "PublicSubnet":{
      "Type":"AWS::EC2::Subnet",
      "Properties":{
        "VpcId":{
          "Ref":"VPC"
        },
        "CidrBlock":{
          "Fn::FindInMap":[
            "SubnetConfig",
            "Public",
            "CIDR"
          ]
        },
        "Tags":[
          {
            "Key":"Application",
            "Value":{
              "Ref":"AWS::StackName"
            }
          },
          {
            "Key":"Network",
            "Value":"Public"
          }
        ]
      }
    },
    "InternetGateway":{
      "Type":"AWS::EC2::InternetGateway",
      "Properties":{
        "Tags":[
          {
            "Key":"Application",
            "Value":{
              "Ref":"AWS::StackName"
            }
          },
          {
            "Key":"Network",
            "Value":"Public"
          }
        ]
      }
    },
    "GatewayToInternetAttachment":{
      "Type":"AWS::EC2::VPCGatewayAttachment",
      "Properties":{
        "VpcId":{
          "Ref":"VPC"
        },
        "InternetGatewayId":{
          "Ref":"InternetGateway"
        }
      }
    },
    "PublicRouteTable":{
      "Type":"AWS::EC2::RouteTable",
      "Properties":{
        "VpcId":{
          "Ref":"VPC"
        },
        "Tags":[
          {
            "Key":"Application",
            "Value":{
              "Ref":"AWS::StackName"
            }
          },
          {
            "Key":"Network",
            "Value":"Public"
          }
        ]
      }
    },
    "PublicRoute":{
      "Type":"AWS::EC2::Route",
      "DependsOn":"GatewayToInternetAttachment",
      "Properties":{
        "RouteTableId":{
          "Ref":"PublicRouteTable"
        },
        "DestinationCidrBlock":"0.0.0.0/0",
        "GatewayId":{
          "Ref":"InternetGateway"
        }
      }
    },
    "PublicSubnetRouteTableAssociation":{
      "Type":"AWS::EC2::SubnetRouteTableAssociation",
      "Properties":{
        "SubnetId":{
          "Ref":"PublicSubnet"
        },
        "RouteTableId":{
          "Ref":"PublicRouteTable"
        }
      }
    },
    "PublicNetworkAcl":{
      "Type":"AWS::EC2::NetworkAcl",
      "Properties":{
        "VpcId":{
          "Ref":"VPC"
        },
        "Tags":[
          {
            "Key":"Application",
            "Value":{
              "Ref":"AWS::StackName"
            }
          },
          {
            "Key":"Network",
            "Value":"Public"
          }
        ]
      }
    },
    "InboundHTTPPublicNetworkAclEntry":{
      "Type":"AWS::EC2::NetworkAclEntry",
      "Properties":{
        "NetworkAclId":{
          "Ref":"PublicNetworkAcl"
        },
        "RuleNumber":"100",
        "Protocol":"6",
        "RuleAction":"allow",
        "Egress":"false",
        "CidrBlock":"0.0.0.0/0",
        "PortRange":{
          "From":"80",
          "To":"80"
        }
      }
    },
    "InboundHTTPSPublicNetworkAclEntry":{
      "Type":"AWS::EC2::NetworkAclEntry",
      "Properties":{
        "NetworkAclId":{
          "Ref":"PublicNetworkAcl"
        },
        "RuleNumber":"101",
        "Protocol":"6",
        "RuleAction":"allow",
        "Egress":"false",
        "CidrBlock":"0.0.0.0/0",
        "PortRange":{
          "From":"443",
          "To":"443"
        }
      }
    },
    "InboundSSHPublicNetworkAclEntry":{
      "Type":"AWS::EC2::NetworkAclEntry",
      "Properties":{
        "NetworkAclId":{
          "Ref":"PublicNetworkAcl"
        },
        "RuleNumber":"102",
        "Protocol":"6",
        "RuleAction":"allow",
        "Egress":"false",
        "CidrBlock":{
          "Ref":"SSHLocation"
        },
        "PortRange":{
          "From":"22",
          "To":"22"
        }
      }
    },
    "InboundEphemeralPublicNetworkAclEntry":{
      "Type":"AWS::EC2::NetworkAclEntry",
      "Properties":{
        "NetworkAclId":{
          "Ref":"PublicNetworkAcl"
        },
        "RuleNumber":"103",
        "Protocol":"6",
        "RuleAction":"allow",
        "Egress":"false",
        "CidrBlock":"0.0.0.0/0",
        "PortRange":{
          "From":"1024",
          "To":"65535"
        }
      }
    },
    "OutboundPublicNetworkAclEntry":{
      "Type":"AWS::EC2::NetworkAclEntry",
      "Properties":{
        "NetworkAclId":{
          "Ref":"PublicNetworkAcl"
        },
        "RuleNumber":"100",
        "Protocol":"6",
        "RuleAction":"allow",
        "Egress":"true",
        "CidrBlock":"0.0.0.0/0",
        "PortRange":{
          "From":"0",
          "To":"65535"
        }
      }
    },
    "PublicSubnetNetworkAclAssociation":{
      "Type":"AWS::EC2::SubnetNetworkAclAssociation",
      "Properties":{
        "SubnetId":{
          "Ref":"PublicSubnet"
        },
        "NetworkAclId":{
          "Ref":"PublicNetworkAcl"
        }
      }
    },
    "EC2Host":{
      "Type":"AWS::EC2::Instance",
      "DependsOn":"GatewayToInternetAttachment",
      "Properties":{
        "InstanceType":{
          "Ref":"EC2InstanceType"
        },
        "KeyName":{
          "Ref":"KeyName"
        },
        "ImageId":{
          "Fn::FindInMap":[
            "AWSRegion2AMI",
            {
              "Ref":"AWS::Region"
            },
            "AMI"
          ]
        },
        "NetworkInterfaces":[
          {
            "GroupSet":[
              {
                "Ref":"EC2SecurityGroup"
              }
            ],
            "AssociatePublicIpAddress":"true",
            "DeviceIndex":"0",
            "DeleteOnTermination":"true",
            "SubnetId":{
              "Ref":"PublicSubnet"
            }
          }
        ],
        "UserData":{
          "Fn::Base64":{
            "Fn::Join":[
              "\n",
              [
                "#!/bin/bash -xe",
                "touch /tmp/eatcode.txt",
                "yum -y install vim curl wget java-1.8.0-openjdk-headless"
              ]
            ]
          }
        }
      }
    },
    "EC2SecurityGroup":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupDescription":"Enable access to the EC2 host",
        "VpcId":{
          "Ref":"VPC"
        },
        "SecurityGroupIngress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"22",
            "ToPort":"22",
            "CidrIp":{
              "Ref":"SSHLocation"
            }
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"80",
            "ToPort":"80",
            "CidrIp":"0.0.0.0/0"
          }
        ]
      }
    }
  },
  "Outputs":{
    "VPCId":{
      "Description":"VPCId of the newly created VPC",
      "Value":{
        "Ref":"VPC"
      }
    },
    "PublicSubnet":{
      "Description":"SubnetId of the public subnet",
      "Value":{
        "Ref":"PublicSubnet"
      }
    },
    "DNSName":{
      "Description":"DNS Name of the EC2 host",
      "Value":{
        "Fn::GetAtt":[
          "EC2Host",
          "PublicDnsName"
        ]
      }
    }
  }
}
